WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4638: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.y = self.y[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4639: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.current_dates = self.current_dates[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4638: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.y = self.y[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4639: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.current_dates = self.current_dates[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4638: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.y = self.y[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4639: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.current_dates = self.current_dates[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4638: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.y = self.y[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\Forecaster.py:4639: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  self.current_dates = self.current_dates[-n:]

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:253: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  raw_anom = pd.Series()

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:254: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  labeled_anom = pd.Series()

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

WARNING:py.warnings:C:\Users\Vahid\AppData\Local\Programs\Python\Python310\lib\site-packages\scalecast\AnomalyDetector.py:202: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  results[f"Iter{s}"] = simmed_line

